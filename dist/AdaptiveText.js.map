{"version":3,"sources":["../src/AdaptiveText.js"],"names":[],"mappings":"AAAA,OAAO,KAAP,IACE,SADF,EAEE,MAFF,EAGE,QAHF,QAIO,OAJP;;AAMA,MAAM,YAAY,GAAG,CAAC;AACpB,EAAA,KADoB;AAEpB,EAAA,UAFoB;AAGpB,EAAA,WAHoB;AAIpB,EAAA,WAJoB;AAKpB,EAAA,SALoB;AAMpB,EAAA,UANoB;AAOpB,EAAA,IAPoB;AAQpB,EAAA,cARoB;AASpB,EAAA,KAAK,GAAG;AATY,CAAD,KAUf;AACJ,QAAM,SAAS,GAAG,MAAM,EAAxB;AACA,QAAM,MAAM,GAAG,MAAM,EAArB;AAEA,QAAM,CAAC,SAAD,EAAY,YAAZ,IAA4B,QAAQ,CAAC;AACzC,IAAA,OAAO,EAAE,CADgC;AAEzC,IAAA,UAAU,EAAE;AAF6B,GAAD,CAA1C;AAKA,QAAM,YAAY,GAAG;AACnB,IAAA,OAAO,EAAE,OADU;AAEnB,IAAA,SAAS,EAAE;AAFQ,GAArB;;AAKA,QAAM,QAAQ,GAAG,CAAC,SAAD,EAAY,QAAZ,KAAyB;AACxC,QAAI,SAAS,IAAI,OAAO,SAAP,KAAqB,WAAtC,EAAmD;AACjD,MAAA,YAAY,CAAC,QAAD,CAAZ,GAAyB,SAAzB;AACD;AACF,GAJD;;AAMA,EAAA,QAAQ,CAAC,KAAD,EAAQ,OAAR,CAAR;AACA,EAAA,QAAQ,CAAC,UAAD,EAAa,YAAb,CAAR;AACA,EAAA,QAAQ,CAAC,SAAD,EAAY,WAAZ,CAAR;AACA,EAAA,QAAQ,CAAC,UAAD,EAAa,YAAb,CAAR;AACA,EAAA,QAAQ,CAAC,cAAD,EAAiB,gBAAjB,CAAR;AACA,EAAA,QAAQ,CAAC,KAAD,EAAQ,OAAR,CAAR;AAEA,EAAA,SAAS,CAAC,MAAM,YAAY,CAAC;AACzB,IAAA,QAAQ,EAAE,WAAW,CAAC,WAAD,EAAc,WAAd;AADI,GAAD,CAAnB,EAGP,CAAC,WAAD,EAAc,WAAd,EAA2B,IAA3B,EAAiC,KAAjC,CAHO,CAAT;;AAMA,QAAM,WAAW,GAAG,CAAC,WAAD,EAAc,WAAd,KAA8B;AAChD,UAAM,YAAY,GAAG,SAAS,CAAC,OAAV,CAAkB,WAAvC;AACA,UAAM,SAAS,GAAG,MAAM,CAAC,OAAP,CAAe,WAAjC;AACA,UAAM,aAAa,GAAG,MAAM,CAAC,gBAAP,CAAwB,MAAM,CAAC,OAA/B,EAAwC,gBAAxC,CAAyD,WAAzD,CAAtB;AACA,UAAM,WAAW,GAAG,UAAU,CAAC,aAAD,CAA9B;AACA,UAAM,QAAQ,GAAG,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,KAAL,CAAW,WAAX,IAA0B,IAAI,CAAC,KAAL,CAAW,YAAX,CAArC,IAAiE,IAAI,CAAC,IAAL,CAAU,SAAV,CAAlF;;AACA,QAAI,QAAQ,GAAG,WAAf,EAA4B;AAC1B,aAAO,WAAP;AACD;;AACD,QAAI,QAAQ,GAAG,WAAf,EAA4B;AAC1B,aAAO,WAAP;AACD;;AACD,WAAO,QAAP;AACD,GAbD;;AAeA,sBACE;AAAM,IAAA,GAAG,EAAE,SAAX;AAAsB,IAAA,KAAK,EAAE;AAA7B,kBACE;AAAM,IAAA,GAAG,EAAE,MAAX;AAAmB,IAAA,KAAK,EAAE;AAA1B,KAAsC,IAAtC,CADF,CADF;AAKD,CA/DD;;AAiEA,eAAe,YAAf","file":"AdaptiveText.js","sourcesContent":["import React, {\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\n\nconst AdaptiveText = ({\n  color,\n  fontFamily,\n  fontSizeMax,\n  fontSizeMin,\n  fontStyle,\n  fontWeight,\n  text,\n  textDecoration,\n  width = '100%',\n}) => {\n  const wrapperEl = useRef();\n  const textEl = useRef();\n\n  const [textStyle, setTextStyle] = useState({\n    opacity: 0,\n    whiteSpace: 'nowrap',\n  });\n\n  const wrapperStyle = {\n    display: 'block',\n    textAlign: 'center',\n  };\n  \n  const addStyle = (styleProp, propName) => {\n    if (styleProp && typeof styleProp !== 'undefined') {\n      wrapperStyle[propName] = styleProp;\n    }\n  };\n\n  addStyle(color, 'color');\n  addStyle(fontFamily, 'fontFamily');\n  addStyle(fontStyle, 'fontStyle');\n  addStyle(fontWeight, 'fontWeight');\n  addStyle(textDecoration, 'textDecoration');\n  addStyle(width, 'width');\n  \n  useEffect(() => setTextStyle({\n      fontSize: getFontSize(fontSizeMax, fontSizeMin),\n    }),\n    [fontSizeMax, fontSizeMin, text, width],\n  );\n\n  const getFontSize = (fontSizeMax, fontSizeMin) => {\n    const wrapperWidth = wrapperEl.current.offsetWidth;\n    const textWidth = textEl.current.offsetWidth;\n    const fontSizeRefPx = window.getComputedStyle(textEl.current).getPropertyValue('font-size');\n    const fontSizeRef = parseFloat(fontSizeRefPx);\n    const fontSize = Math.floor(Math.floor(fontSizeRef) * Math.floor(wrapperWidth)) / Math.ceil(textWidth);\n    if (fontSize > fontSizeMax) {\n      return fontSizeMax;\n    }\n    if (fontSize < fontSizeMin) {\n      return fontSizeMin;\n    }\n    return fontSize;\n  };\n\n  return (\n    <span ref={wrapperEl} style={wrapperStyle}>\n      <span ref={textEl} style={textStyle}>{text}</span>\n    </span>\n  );\n};\n\nexport default AdaptiveText;"]}