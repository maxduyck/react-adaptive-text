{"version":3,"sources":["../src/AdaptiveText.js"],"names":[],"mappings":"AAAA,OAAO,KAAP,IACE,SADF,EAEE,MAFF,EAGE,QAHF,QAIO,OAJP;;AAMA,MAAM,YAAY,GAAG,CAAC;AACpB,EAAA,KAAK,GAAG,SADY;AAEpB,EAAA,cAAc,GAAG,MAFG;AAGpB,EAAA,UAAU,GAAG,SAHO;AAIpB,EAAA,WAJoB;AAKpB,EAAA,WALoB;AAMpB,EAAA,SAAS,GAAG,SANQ;AAOpB,EAAA,UAAU,GAAG,SAPO;AAQpB,EAAA,IARoB;AASpB,EAAA,cAAc,GAAG;AATG,CAAD,KAUf;AACJ,QAAM,SAAS,GAAG,MAAM,EAAxB;AACA,QAAM,MAAM,GAAG,MAAM,EAArB;AAEA,QAAM,CAAC,SAAD,EAAY,YAAZ,IAA4B,QAAQ,CAAC;AACzC,IAAA,OAAO,EAAE,CADgC;AAEzC,IAAA,UAAU,EAAE;AAF6B,GAAD,CAA1C;AAKA,QAAM,YAAY,GAAG;AACnB,IAAA,KAAK,EAAE,KADY;AAEnB,IAAA,OAAO,EAAE,OAFU;AAGnB,IAAA,UAAU,EAAE,UAHO;AAInB,IAAA,SAAS,EAAE,SAJQ;AAKnB,IAAA,UAAU,EAAE,UALO;AAMnB,IAAA,SAAS,EAAE,QANQ;AAOnB,IAAA,cAAc,EAAE,cAPG;AAQnB,IAAA,KAAK,EAAE;AARY,GAArB;AAWA,EAAA,SAAS,CAAC,MAAM,YAAY,CAAC;AACzB,IAAA,QAAQ,EAAE,WAAW,CAAC,WAAD,EAAc,WAAd;AADI,GAAD,CAAnB,EAGP,CAAC,cAAD,EAAiB,WAAjB,EAA8B,WAA9B,EAA2C,IAA3C,CAHO,CAAT;;AAMA,QAAM,WAAW,GAAG,CAAC,WAAD,EAAc,WAAd,KAA8B;AAChD,UAAM,YAAY,GAAG,SAAS,CAAC,OAAV,CAAkB,WAAvC;AACA,UAAM,SAAS,GAAG,MAAM,CAAC,OAAP,CAAe,WAAjC;AACA,UAAM,aAAa,GAAG,MAAM,CAAC,gBAAP,CAAwB,MAAM,CAAC,OAA/B,EAAwC,gBAAxC,CAAyD,WAAzD,CAAtB;AACA,UAAM,WAAW,GAAG,UAAU,CAAC,aAAD,CAA9B;AACA,UAAM,QAAQ,GAAG,IAAI,CAAC,KAAL,CAAW,WAAW,GAAG,YAAzB,IAAyC,IAAI,CAAC,IAAL,CAAU,SAAV,CAA1D;;AACA,QAAI,QAAQ,GAAG,WAAf,EAA4B;AAC1B,aAAO,WAAP;AACD;;AACD,QAAI,QAAQ,GAAG,WAAf,EAA4B;AAC1B,aAAO,WAAP;AACD;;AACD,WAAO,QAAP;AACD,GAbD;;AAeA,sBACE;AAAM,IAAA,GAAG,EAAE,SAAX;AAAsB,IAAA,KAAK,EAAE;AAA7B,kBACE;AAAM,IAAA,GAAG,EAAE,MAAX;AAAmB,IAAA,KAAK,EAAE;AAA1B,KAAsC,IAAtC,CADF,CADF;AAKD,CAxDD;;AA0DA,eAAe,YAAf","file":"AdaptiveText.js","sourcesContent":["import React, {\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\n\nconst AdaptiveText = ({\n  color = 'inherit',\n  containerWidth = '100%',\n  fontFamily = 'inherit',\n  fontSizeMax,\n  fontSizeMin,\n  fontStyle = 'inherit',\n  fontWeight = 'inherit',\n  text,\n  textDecoration = 'inherit',\n}) => {\n  const wrapperEl = useRef();\n  const textEl = useRef();\n\n  const [textStyle, setTextStyle] = useState({\n    opacity: 0,\n    whiteSpace: 'nowrap',\n  });\n\n  const wrapperStyle = {\n    color: color,\n    display: 'block',\n    fontFamily: fontFamily,\n    fontStyle: fontStyle,\n    fontWeight: fontWeight,\n    textAlign: 'center',\n    textDecoration: textDecoration,\n    width: containerWidth,\n  };\n\n  useEffect(() => setTextStyle({\n      fontSize: getFontSize(fontSizeMax, fontSizeMin),\n    }),\n    [containerWidth, fontSizeMax, fontSizeMin, text],\n  );\n\n  const getFontSize = (fontSizeMax, fontSizeMin) => {\n    const wrapperWidth = wrapperEl.current.offsetWidth;\n    const textWidth = textEl.current.offsetWidth;\n    const fontSizeRefPx = window.getComputedStyle(textEl.current).getPropertyValue('font-size');\n    const fontSizeRef = parseFloat(fontSizeRefPx);\n    const fontSize = Math.floor(fontSizeRef * wrapperWidth) / Math.ceil(textWidth);\n    if (fontSize > fontSizeMax) {\n      return fontSizeMax;\n    }\n    if (fontSize < fontSizeMin) {\n      return fontSizeMin;\n    }\n    return fontSize;\n  };\n\n  return (\n    <span ref={wrapperEl} style={wrapperStyle}>\n      <span ref={textEl} style={textStyle}>{text}</span>\n    </span>\n  );\n};\n\nexport default AdaptiveText;"]}